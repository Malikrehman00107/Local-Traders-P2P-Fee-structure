// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract P2PCryptoExchange {
    using SafeMath for uint256; // Use SafeMath for all uint256 operations

    // Data structures
    mapping(address => uint256) public sellerBalances;
    struct Offer {
        address seller;
        uint256 amount;
        uint256 marketplaceBalance; // Balance after marketplace fee
    }
    mapping(uint256 => Offer) public offers; // Keyed by offer ID

    // Function for seller to create an offer
    function createOffer(uint256 amount) public {
        uint256 fee = amount.mul(1).div(100); // SafeMath: amount * 0.01
        uint256 marketplaceBalance = amount.sub(fee); // SafeMath: amount - fee
        sellerBalances[msg.sender] = sellerBalances[msg.sender].sub(amount); // SafeMath: -= amount
        offers[offers.length + 1] = Offer(msg.sender, amount, marketplaceBalance);
    }

    // Function for buyer to buy from an offer
    function buyFromOffer(uint256 offerId, uint256 amount) public {
        Offer storage offer = offers[offerId];
        require(offer.amount >= amount, "Insufficient offer balance");

        uint256 fee = amount.mul(1).div(100); // SafeMath: amount * 0.01
        offer.amount = offer.amount.sub(amount); // SafeMath: -= amount
        offer.marketplaceBalance = offer.marketplaceBalance.sub(amount.add(fee)); // SafeMath: -= amount + fee
        sellerBalances[offer.seller] = sellerBalances[offer.seller].add(amount.sub(fee)); // SafeMath: += amount - fee
        // ... (transfer tokens to buyer, update buyer's balance, etc.)
    }

    // Function for seller to edit an offer (incomplete)
    function editOffer(uint256 offerId, uint256 amountToAdd) public {
        // ... (implement logic to update offer amount and balance)
    }

    // Function to view a seller's balance
    function viewSellerBalance(address seller) public view returns (uint256) {
        return sellerBalances[seller];
    }

    // Function to view an offer's marketplace balance
    function viewOfferMarketplaceBalance(uint256 offerId) public view returns (uint256) {
        return offers[offerId].marketplaceBalance;
    }
}
